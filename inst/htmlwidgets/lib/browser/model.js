"use strict";

// Generated by CoffeeScript 2.3.1
(function () {
  // --- DataSet ----------------------------------------------------------

  // Create a data set wrapper.

  // The data set wrapper is handy for the following two reasons:
  //   * JSON data received from R might require certain transformations
  //   * wrapper acts as an abstraction layer and hides chages in how the
  //     data is formatted and/or handled on either side (R and JS browser)

  // @param raw JSON data received from R.

  var DataSet;

  DataSet = function DataSet(raw) {
    var augmentAsTree, dataset, stratified;
    dataset = function dataset() {};
    // Turns a list of elements into a tree.
    stratified = function stratified() {
      var stratify;
      stratify = d3.stratify().id(function (d) {
        return d.id;
      }).parentId(function (d) {
        if (d.parents instanceof Array) {
          // JSON array for mulitple parents is simplified if there is only one parent
          return d.parents[0];
        }
        return d.parents;
      });
      return stratify(raw);
    };
    // Transforms the raw data into a tree of elements.
    augmentAsTree = function augmentAsTree() {
      var strats, _traverse;
      log.debug("traversing as tree");
      _traverse = function traverse(node, parent) {
        var child, i, len, ref, results;
        // TODO add DFS parentheses
        node.data.depth = node.depth;
        if (node.children) {
          ref = node.children;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            child = ref[i];
            results.push(_traverse(child, node.data));
          }
          return results;
        }
      };
      strats = stratified();
      return _traverse(strats, {});
    };
    // --- for each -------------------------------------------------------
    dataset.forEach = function (fun) {
      return raw.forEach(fun);
    };
    dataset.asTree = function () {
      var strats, _traverse2;
      _traverse2 = function traverse(node) {
        var child;
        if (node.children) {
          node.data.children = function () {
            var i, len, ref, results;
            ref = node.children;
            results = [];
            for (i = 0, len = ref.length; i < len; i++) {
              child = ref[i];
              results.push(_traverse2(child));
            }
            return results;
          }();
        } else {
          node.data.children = [];
        }
        return node.data;
      };
      strats = stratified();
      return _traverse2(strats);
    };
    // --- initialize and return ------------------------------------------
    augmentAsTree();
    return dataset;
  };

  // --- exports ----------------------------------------------------------
  window.DataSet = DataSet;
}).call(undefined);